{"version":3,"sources":["components/MovieListItem/MovieListItem.js","components/MovieList/MovieList.js","components/Home/Home.js","components/Details/Details.js","components/AddGenre/AddGenre.js","components/GenreListItem/GenreListItem.js","components/GenreList/GenreList.js","components/Edit/Edit.js","components/App/App.js","registerServiceWorker.js","redux/sagas/movies.saga.js","redux/sagas/genres.saga.js","redux/sagas/index.js","redux/reducers/movies.reducer.js","redux/reducers/genres.reducer.js","redux/reducers/oneMovie.reducer.js","redux/reducers/oneMovieGenres.reducer.js","redux/reducers/index.js","index.js"],"names":["MovieListItem","handleClick","_this","props","dispatch","type","payload","movie","id","history","push","react_default","a","createElement","Grid_default","item","xs","src","this","poster","alt","title","onClick","Component","connect","MovieList","container","direction","justify","alignItems","reduxState","movies","map","components_MovieListItem_MovieListItem","key","Home","className","components_MovieList_MovieList","Details","movieId","match","params","alignContent","Button_default","concat","oneMovie","description","oneMovieGenres","genre","name","AddGenre","state","genre_id","addGenre","alert","movie_id","handleChange","event","setState","target","value","Select_default","onChange","genres","MenuItem_default","GenreListItem","handleDelete","relation_id","IconButton_default","aria-label","Delete_default","GenreList","Fragment","components_GenreListItem_GenreListItem","Edit","updateMovie","dispatchUpdate","handleChangeFor","propertyName","Object","objectSpread","defineProperty","_this2","TextField_default","fullWidth","margin","multiline","rowsMax","label","defaultValue","variant","components_AddGenre_AddGenre","components_GenreList_GenreList","App","react_router_dom","react_router","path","exact","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","fetchMovies","fetchOneMovie","watcherSaga","moviesResponse","regenerator_default","wrap","_context","prev","next","call","axios","get","sent","data","t0","stop","_marked","action","movieResponse","_context2","_marked2","_context3","put","_marked3","_context4","takeEvery","_marked4","fetchGenres","fetchOneMovieGenres","postNewGenreRelation","deleteMovieGenreRelation","genresResponse","genres_saga_marked","_genresResponse","genres_saga_marked2","post","genres_saga_marked3","delete","genres_saga_marked4","_context5","_marked5","rootSaga","all","movieSagas","genreSagas","sagas_marked","initialMovie","arguments","length","undefined","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","storeInstance","createStore","applyMiddleware","logger","run","ReactDOM","render","es","store","components_App_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6cfccf04.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\n\nclass MovieListItem extends Component {\n\n    handleClick = () => {\n        this.props.dispatch({type: 'FETCH_ONE_MOVIE', payload: this.props.movie.id});\n        this.props.history.push('/details/' + this.props.movie.id);\n    }\n    \n    render() {\n        return (\n            <Grid item xs={3}>\n                <img src={this.props.movie.poster} \n                    alt={this.props.movie.title} \n                    onClick={this.handleClick}/>\n            </Grid>\n        );\n    }\n}\n\nexport default connect()(MovieListItem);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport MovieListItem from '../MovieListItem/MovieListItem';\n\nclass MovieList extends Component {\n    render() {\n        return (\n            <Grid container\n                direction=\"row\"\n                justify=\"space-evenly\"\n                alignItems=\"flex-start\">\n                    {this.props.reduxState.movies.map(movie => {\n                        return (\n                            <MovieListItem key={movie.id} movie={movie} history={this.props.history}/>\n                        );\n                    })}\n            </Grid>\n        );\n    }\n}\n\nconst mapReduxStateToProps = reduxState => ({\n    reduxState\n});\n\nexport default connect(mapReduxStateToProps)(MovieList);","import React, { Component } from 'react';\nimport './Home.css';\nimport { connect } from 'react-redux';\nimport MovieList from '../MovieList/MovieList';\n\nclass Home extends Component {\n    \n    componentDidMount() {\n        this.props.dispatch({type: 'FETCH_MOVIES'});\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <MovieList history={this.props.history}/>\n            </div>\n        );\n    }\n}\n\nexport default connect()(Home);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import SvgIcon from '@material-ui/core/SvgIcon';\n\nclass Details extends Component {\n\n    componentDidMount() {\n        const movieId = this.props.match.params.movieId;\n        this.props.dispatch({\n            type: 'FETCH_ONE_MOVIE', \n            payload: movieId,\n        });\n        this.props.dispatch({\n            type: 'FETCH_ONE_MOVIE_GENRES',\n            payload: movieId,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Grid container\n                    justify='center'\n                    alignContent='center'>\n                    <Grid item xs={3}>\n                        <Button onClick={() => this.props.history.push('/')}>\n                            Back to List\n                        </Button>\n                        <Button onClick={() => this.props.history.push(`/edit/${this.props.match.params.movieId}`)}>\n                            Edit\n                        </Button>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <h3>{this.props.reduxState.oneMovie.title}</h3>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <h4>Genres:</h4>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                        <Grid item xs={3}>\n                            <img src={this.props.reduxState.oneMovie.poster} \n                                alt={this.props.reduxState.oneMovie.title}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <p>{this.props.reduxState.oneMovie.description}</p>\n                        </Grid>\n                        <Grid item xs={3}>\n                            {this.props.reduxState.oneMovieGenres.map(genre => <div key={genre.id}>{genre.name}</div>)}\n                        </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nconst mapReduxStateToProps = (reduxState) => ({\n    reduxState,\n});\n\nexport default connect(mapReduxStateToProps)(Details);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\n\nclass AddGenre extends Component {\n\n    state = {\n        name: '',\n        genre_id: '',\n    }\n\n    // on click add movie / genre relation\n    addGenre = () => {\n        if(this.state.genre_id === ''){\n            alert('please select a genre to add.')\n        } else {\n           this.props.dispatch({\n                type: 'ADD_GENRE',\n                payload: {\n                    movie_id: this.props.movieId,\n                    genre_id: this.state.genre_id,\n                }\n            }); \n        } \n    }\n\n    // handle change on select\n    handleChange = (event, props) => {\n        this.setState({\n            name: event.target.value,\n            genre_id: props.key,\n        })\n    }\n\n    // fetch genre list on load\n    componentDidMount() {\n        this.props.dispatch({\n            type: 'FETCH_GENRES'\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Select value={this.state.name} onChange={this.handleChange}>\n                    {this.props.reduxState.genres.map( genre => {\n                        return (\n                            <MenuItem key={genre.id} value={genre.name}>{genre.name}</MenuItem>\n                        );\n                    })}\n                </Select>\n                <Button onClick={this.addGenre}>Add Genre</Button>\n            </div>\n        );\n    }\n}\n\nconst mapReduxStateToProps = (reduxState) => ({reduxState});\n\nexport default connect(mapReduxStateToProps)(AddGenre);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nclass GenreListItem extends Component {\n\n    // on click, delete movie / genre relation by id of relation\n    handleDelete = () => {\n        this.props.dispatch({\n            type: 'DELETE_GENRE',\n            payload: {\n                relation_id: this.props.genre.id,\n                movie_id: this.props.movieId\n            },\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.genre.name}\n                <IconButton aria-label=\"Delete\" onClick={this.handleDelete}>\n                    <DeleteIcon/>\n                </IconButton>\n            </div>\n        );\n    }\n}\n\nexport default connect()(GenreListItem);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport GenreListItem from '../GenreListItem/GenreListItem';\n\nclass GenreList extends Component {\n    render() {\n        return (\n            <>\n                <h4>Genres:</h4>\n                {this.props.reduxState.oneMovieGenres.map(genre => <GenreListItem key={genre.id} genre={genre} movieId={this.props.movieId}/>)}\n            </>\n        );\n    }\n}\n\nconst mapReduxStateToProps = (reduxState) => ({reduxState});\n\nexport default connect(mapReduxStateToProps)(GenreList);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport AddGenre from '../AddGenre/AddGenre';\nimport GenreList from '../GenreList/GenreList';\n\nclass Edit extends Component {\n\n    state = {\n        title: null,\n        description: null,\n    }\n\n    // will fetch movie and genre relations on load\n    componentDidMount() {\n        const movieId = this.props.match.params.movieId;\n        this.props.dispatch({\n            type: 'FETCH_ONE_MOVIE', \n            payload: movieId,\n        });\n        this.props.dispatch({\n            type: 'FETCH_ONE_MOVIE_GENRES',\n            payload: movieId,\n        });\n    }\n\n    // called to update movie by id on \"save\" click\n    updateMovie = () => {\n        // get title and description\n        let title = this.state.title;\n        let description = this.state.description\n        // if null, set to original value\n        if (title === null) {\n            title = this.props.reduxState.oneMovie.title;\n        }\n        if (description === null) {\n            description = this.props.reduxState.oneMovie.description;\n        }\n        // update movie with new title/description or preserved title/description\n        this.dispatchUpdate( title, description );\n        // navigate to details \n        this.props.history.push(`/details/${this.props.match.params.movieId}`)\n    }\n\n    // called on update\n    dispatchUpdate = ( title, description ) => {\n        this.props.dispatch({\n            type: 'UPDATE_MOVIE',\n            payload: {\n                title: title,\n                description: description,\n                id: this.props.match.params.movieId\n            }\n        });\n    }\n\n    // handle change on text fields\n    handleChangeFor = (propertyName) => (event) => {\n        this.setState({\n            ...this.state,\n            [propertyName]: event.target.value,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Grid container\n                    justify='center'\n                    alignContent='center'>\n                    <Grid item xs={3}>\n                        <Button onClick={() => this.props.history.push(`/details/${this.props.match.params.movieId}`)}>\n                            Cancel\n                        </Button>\n                        <Button onClick={this.updateMovie}>\n                            Save\n                        </Button>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            onChange={this.handleChangeFor('title')}\n                            fullWidth margin=\"normal\"\n                            multiline rowsMax=\"20\"\n                            label=\"Title\"\n                            defaultValue={this.props.reduxState.oneMovie.title}\n                            variant=\"outlined\"\n                        />\n                    </Grid>\n                    <Grid item xs={3}>\n                        <AddGenre movieId={this.props.match.params.movieId}/>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                        <Grid item xs={3}>\n                            <img src={this.props.reduxState.oneMovie.poster} \n                                alt={this.props.reduxState.oneMovie.title}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <TextField\n                                onChange={this.handleChangeFor('description')}\n                                fullWidth margin=\"normal\"\n                                multiline rowsMax=\"20\"\n                                label=\"Description\"\n                                defaultValue={this.props.reduxState.oneMovie.description}\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <GenreList movieId={this.props.match.params.movieId}/>\n                        </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nconst mapReduxStateToProps = (reduxState) => ({\n    reduxState,\n});\n\nexport default connect(mapReduxStateToProps)(Edit);","import React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Home from '../Home/Home';\nimport Details from '../Details/Details';\nimport Edit from '../Edit/Edit';\n\nclass App extends Component {\n  // Renders the entire app on the DOM\n  render() {\n    return (\n      <Router>\n        <Route path=\"/\" exact component={Home}/>\n        <Route path=\"/details/:movieId\" component={Details}/>\n        <Route path=\"/edit/:movieId\" component={Edit}/>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// // src/redux/sagas/movies.saga.js\nimport { call, put as dispatch, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* fetchMovies() {\n    try {\n        // axios GET request\n        const moviesResponse = yield call(axios.get, '/api/movies');\n        // send response to Redux store\n        yield dispatch({type: 'SET_MOVIES', payload: moviesResponse.data});\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nfunction* fetchOneMovie(action) {\n    try {\n        // axios GET request\n        const movieResponse = yield call(axios.get, `/api/movies/details/${action.payload}`);\n        // send response to Redux store\n        yield dispatch({\n            type: 'SET_ONE_MOVIE',\n            payload: movieResponse.data[0]\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nfunction* updateMovie(action) {\n    try {\n        // axios PUT request\n        yield call(axios.put, '/api/movies', action.payload);\n        // fetch updated movie\n        yield dispatch({\n            type: 'FETCH_ONE_MOVIE',\n            payload: action.payload.id\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n// watches for actions\nfunction* watcherSaga() {\n    yield takeEvery('FETCH_MOVIES', fetchMovies);\n    yield takeEvery('FETCH_ONE_MOVIE', fetchOneMovie);\n    yield takeEvery('UPDATE_MOVIE', updateMovie);\n}\n\nexport default watcherSaga;","// // src/redux/sagas/genres.saga.js\nimport { call, put as dispatch, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// fetch all genres from server\nfunction* fetchGenres() {\n    try {\n        // axios GET request\n        const genresResponse = yield call(axios.get, '/api/genres');\n        // send response to Redux store\n        yield dispatch({\n            type: 'SET_GENRES',\n            payload: genresResponse.data\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n// fetch genres for one movie from server\nfunction* fetchOneMovieGenres(action) {\n    try {\n        // axios GET request\n        const genresResponse = yield call(axios.get, `/api/genres/${action.payload}`);\n        // send response to Redux store\n        yield dispatch({\n            type: 'SET_ONE_MOVIE_GENRES',\n            payload: genresResponse.data\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n// post new movie / genre relation to server\nfunction* postNewGenreRelation(action) {\n    try {\n        // axios POST request\n        yield call(axios.post, '/api/genres', action.payload);\n        // fetch updated genres for one movie\n        yield dispatch({\n            type: 'FETCH_ONE_MOVIE_GENRES',\n            payload: action.payload.movie_id\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n// delete movie / genre relation from database\nfunction* deleteMovieGenreRelation(action) {\n    try {\n        console.log(action.payload)\n        // axios DELETE request\n        yield call(axios.delete, `/api/genres/${action.payload.relation_id}`);\n        // fetch updated genres for one movie\n        yield dispatch({\n            type: 'FETCH_ONE_MOVIE_GENRES',\n            payload: action.payload.movie_id,\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n// watches for actions\nfunction* watcherSaga() {\n    yield takeEvery('FETCH_ONE_MOVIE_GENRES', fetchOneMovieGenres);\n    yield takeEvery('FETCH_GENRES', fetchGenres);\n    yield takeEvery('ADD_GENRE', postNewGenreRelation);\n    yield takeEvery('DELETE_GENRE', deleteMovieGenreRelation);\n}\n\nexport default watcherSaga;","// src/redux/sagas/index.js\n// is responsible for loading all sagas, and merging them together\nimport { all } from 'redux-saga/effects';\nimport movieSagas from './movies.saga';\nimport genreSagas from './genres.saga';\n\n// Create the rootSaga generator function\n// this will be imported into index.js for the app\nfunction* rootSaga() {\n    yield all([\n        movieSagas(),\n        genreSagas(),\n    ])\n}\n\nexport default rootSaga;","// // src/redux/reducers/movies.reducer.js\n\nconst initialMovie = {\n    \"id\": 0,\n    \"title\": \"\",\n    \"poster\": \"\",\n    \"description\": \"\"\n}\n\n// Used to store movies returned from the server\nconst movies = (state = [initialMovie], action) => {\n    switch (action.type) {\n        case 'SET_MOVIES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default movies;","// // src/redux/reducers/genres.reducer.js\n\n// Used to store the movie genres\nconst genres = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_GENRES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default genres;","// // src/redux/reducers/oneMovie.reducer.js\n\nconst initialMovie = {\n    \"id\": 0,\n    \"title\": \"\",\n    \"poster\": \"\",\n    \"description\": \"\"\n}\n\n// Used to store one movie at a time for details page\nconst oneMovie = (state = [initialMovie], action) => {\n    switch (action.type) {\n        case 'SET_ONE_MOVIE':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default oneMovie;","// // src/redux/reducers/oneMovieGenres.reducer.js\n\n// Used to store one movie at a time for details page\nconst oneMovieGenres = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_ONE_MOVIE_GENRES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default oneMovieGenres;","// src/redux/reducers/reducers.js\nimport { combineReducers } from 'redux';\nimport movies from './movies.reducer';\nimport genres from './genres.reducer';\nimport oneMovie from './oneMovie.reducer';\nimport oneMovieGenres from './oneMovieGenres.reducer';\n\nconst rootReducer = combineReducers({\n    movies,\n    genres,\n    oneMovie,\n    oneMovieGenres,\n});\n\nexport default rootReducer;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\n\n// Import sagas and reducers\nimport rootSaga from './redux/sagas/index';\nimport rootReducer from './redux/reducers/index';\n\n// Create sagaMiddleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Create one store that all components can use\nconst storeInstance = createStore(\n    // Combined reducers\n    rootReducer,\n    // Add sagaMiddleware to our store\n    applyMiddleware(sagaMiddleware, logger),\n);\n\n// Pass rootSaga into our sagaMiddleware\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(<Provider store={storeInstance}><App /></Provider>, \n    document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}